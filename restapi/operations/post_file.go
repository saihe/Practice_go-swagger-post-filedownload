// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PostFileHandlerFunc turns a function with the right signature into a post file handler
type PostFileHandlerFunc func(PostFileParams) middleware.Responder

// Handle executing the request and returning a response
func (fn PostFileHandlerFunc) Handle(params PostFileParams) middleware.Responder {
	return fn(params)
}

// PostFileHandler interface for that can handle valid post file params
type PostFileHandler interface {
	Handle(PostFileParams) middleware.Responder
}

// NewPostFile creates a new http.Handler for the post file operation
func NewPostFile(ctx *middleware.Context, handler PostFileHandler) *PostFile {
	return &PostFile{Context: ctx, Handler: handler}
}

/* PostFile swagger:route POST /file postFile

PostFile post file API

*/
type PostFile struct {
	Context *middleware.Context
	Handler PostFileHandler
}

func (o *PostFile) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewPostFileParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// PostFileBody post file body
//
// swagger:model PostFileBody
type PostFileBody struct {

	// id
	// Required: true
	ID *string `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`
}

// Validate validates this post file body
func (o *PostFileBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *PostFileBody) validateID(formats strfmt.Registry) error {

	if err := validate.Required("file"+"."+"id", "body", o.ID); err != nil {
		return err
	}

	return nil
}

func (o *PostFileBody) validateName(formats strfmt.Registry) error {

	if err := validate.Required("file"+"."+"name", "body", o.Name); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this post file body based on context it is used
func (o *PostFileBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostFileBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFileBody) UnmarshalBinary(b []byte) error {
	var res PostFileBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// PostFileOKBody post file o k body
//
// swagger:model PostFileOKBody
type PostFileOKBody struct {

	// data
	// Format: byte
	Data strfmt.Base64 `json:"data,omitempty"`

	// name
	Name string `json:"name,omitempty"`
}

// Validate validates this post file o k body
func (o *PostFileOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this post file o k body based on context it is used
func (o *PostFileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *PostFileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *PostFileOKBody) UnmarshalBinary(b []byte) error {
	var res PostFileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
